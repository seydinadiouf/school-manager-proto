// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: school-manager.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchoolManagerServiceClient is the client API for SchoolManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchoolManagerServiceClient interface {
	GetStudentsWithFilter(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*StudentsPage, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	AddStudentToClass(ctx context.Context, in *CreateStudentRequest, opts ...grpc.CallOption) (*Student, error)
}

type schoolManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchoolManagerServiceClient(cc grpc.ClientConnInterface) SchoolManagerServiceClient {
	return &schoolManagerServiceClient{cc}
}

func (c *schoolManagerServiceClient) GetStudentsWithFilter(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*StudentsPage, error) {
	out := new(StudentsPage)
	err := c.cc.Invoke(ctx, "/proto.SchoolManagerService/getStudentsWithFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolManagerServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/proto.SchoolManagerService/signIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolManagerServiceClient) AddStudentToClass(ctx context.Context, in *CreateStudentRequest, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/proto.SchoolManagerService/AddStudentToClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchoolManagerServiceServer is the server API for SchoolManagerService service.
// All implementations must embed UnimplementedSchoolManagerServiceServer
// for forward compatibility
type SchoolManagerServiceServer interface {
	GetStudentsWithFilter(context.Context, *GetStudentRequest) (*StudentsPage, error)
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	AddStudentToClass(context.Context, *CreateStudentRequest) (*Student, error)
	mustEmbedUnimplementedSchoolManagerServiceServer()
}

// UnimplementedSchoolManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchoolManagerServiceServer struct {
}

func (UnimplementedSchoolManagerServiceServer) GetStudentsWithFilter(context.Context, *GetStudentRequest) (*StudentsPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentsWithFilter not implemented")
}
func (UnimplementedSchoolManagerServiceServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedSchoolManagerServiceServer) AddStudentToClass(context.Context, *CreateStudentRequest) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudentToClass not implemented")
}
func (UnimplementedSchoolManagerServiceServer) mustEmbedUnimplementedSchoolManagerServiceServer() {}

// UnsafeSchoolManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchoolManagerServiceServer will
// result in compilation errors.
type UnsafeSchoolManagerServiceServer interface {
	mustEmbedUnimplementedSchoolManagerServiceServer()
}

func RegisterSchoolManagerServiceServer(s grpc.ServiceRegistrar, srv SchoolManagerServiceServer) {
	s.RegisterService(&SchoolManagerService_ServiceDesc, srv)
}

func _SchoolManagerService_GetStudentsWithFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolManagerServiceServer).GetStudentsWithFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SchoolManagerService/getStudentsWithFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolManagerServiceServer).GetStudentsWithFilter(ctx, req.(*GetStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolManagerService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolManagerServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SchoolManagerService/signIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolManagerServiceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolManagerService_AddStudentToClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolManagerServiceServer).AddStudentToClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SchoolManagerService/AddStudentToClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolManagerServiceServer).AddStudentToClass(ctx, req.(*CreateStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchoolManagerService_ServiceDesc is the grpc.ServiceDesc for SchoolManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchoolManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SchoolManagerService",
	HandlerType: (*SchoolManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getStudentsWithFilter",
			Handler:    _SchoolManagerService_GetStudentsWithFilter_Handler,
		},
		{
			MethodName: "signIn",
			Handler:    _SchoolManagerService_SignIn_Handler,
		},
		{
			MethodName: "AddStudentToClass",
			Handler:    _SchoolManagerService_AddStudentToClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "school-manager.proto",
}
