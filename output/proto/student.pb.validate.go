// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: student.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Student with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Student) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Student with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StudentMultiError, or nil if none found.
func (m *Student) ValidateAll() error {
	return m.validate(true)
}

func (m *Student) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudentId

	// no validation rules for StudentName

	if all {
		switch v := interface{}(m.GetSchoolClass()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentValidationError{
					field:  "SchoolClass",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentValidationError{
					field:  "SchoolClass",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchoolClass()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentValidationError{
				field:  "SchoolClass",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StudentMultiError(errors)
	}

	return nil
}

// StudentMultiError is an error wrapping multiple validation errors returned
// by Student.ValidateAll() if the designated constraints aren't met.
type StudentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudentMultiError) AllErrors() []error { return m }

// StudentValidationError is the validation error returned by Student.Validate
// if the designated constraints aren't met.
type StudentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudentValidationError) ErrorName() string { return "StudentValidationError" }

// Error satisfies the builtin error interface
func (e StudentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudentValidationError{}

// Validate checks the field values on SchoolClass with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SchoolClass) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SchoolClass with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SchoolClassMultiError, or
// nil if none found.
func (m *SchoolClass) ValidateAll() error {
	return m.validate(true)
}

func (m *SchoolClass) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SchoolClassId

	// no validation rules for SchoolClassName

	if all {
		switch v := interface{}(m.GetTeacher()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SchoolClassValidationError{
					field:  "Teacher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SchoolClassValidationError{
					field:  "Teacher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTeacher()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchoolClassValidationError{
				field:  "Teacher",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SchoolClassMultiError(errors)
	}

	return nil
}

// SchoolClassMultiError is an error wrapping multiple validation errors
// returned by SchoolClass.ValidateAll() if the designated constraints aren't met.
type SchoolClassMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SchoolClassMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SchoolClassMultiError) AllErrors() []error { return m }

// SchoolClassValidationError is the validation error returned by
// SchoolClass.Validate if the designated constraints aren't met.
type SchoolClassValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchoolClassValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchoolClassValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchoolClassValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchoolClassValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchoolClassValidationError) ErrorName() string { return "SchoolClassValidationError" }

// Error satisfies the builtin error interface
func (e SchoolClassValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchoolClass.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchoolClassValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchoolClassValidationError{}

// Validate checks the field values on Teacher with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Teacher) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Teacher with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TeacherMultiError, or nil if none found.
func (m *Teacher) ValidateAll() error {
	return m.validate(true)
}

func (m *Teacher) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeacherId

	// no validation rules for TeacherName

	if len(errors) > 0 {
		return TeacherMultiError(errors)
	}

	return nil
}

// TeacherMultiError is an error wrapping multiple validation errors returned
// by Teacher.ValidateAll() if the designated constraints aren't met.
type TeacherMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeacherMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeacherMultiError) AllErrors() []error { return m }

// TeacherValidationError is the validation error returned by Teacher.Validate
// if the designated constraints aren't met.
type TeacherValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeacherValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeacherValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeacherValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeacherValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeacherValidationError) ErrorName() string { return "TeacherValidationError" }

// Error satisfies the builtin error interface
func (e TeacherValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeacher.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeacherValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeacherValidationError{}

// Validate checks the field values on GetStudentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStudentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStudentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStudentRequestMultiError, or nil if none found.
func (m *GetStudentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStudentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SchoolClassName

	// no validation rules for TeacherName

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return GetStudentRequestMultiError(errors)
	}

	return nil
}

// GetStudentRequestMultiError is an error wrapping multiple validation errors
// returned by GetStudentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStudentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStudentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStudentRequestMultiError) AllErrors() []error { return m }

// GetStudentRequestValidationError is the validation error returned by
// GetStudentRequest.Validate if the designated constraints aren't met.
type GetStudentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStudentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStudentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStudentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStudentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStudentRequestValidationError) ErrorName() string {
	return "GetStudentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStudentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStudentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStudentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStudentRequestValidationError{}

// Validate checks the field values on CreateStudentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStudentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStudentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStudentRequestMultiError, or nil if none found.
func (m *CreateStudentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStudentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSchoolClassName()) < 1 {
		err := CreateStudentRequestValidationError{
			field:  "SchoolClassName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStudentName()) < 1 {
		err := CreateStudentRequestValidationError{
			field:  "StudentName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateStudentRequestMultiError(errors)
	}

	return nil
}

// CreateStudentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateStudentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateStudentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStudentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStudentRequestMultiError) AllErrors() []error { return m }

// CreateStudentRequestValidationError is the validation error returned by
// CreateStudentRequest.Validate if the designated constraints aren't met.
type CreateStudentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStudentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStudentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStudentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStudentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStudentRequestValidationError) ErrorName() string {
	return "CreateStudentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStudentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStudentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStudentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStudentRequestValidationError{}

// Validate checks the field values on StudentsPage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StudentsPage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudentsPage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StudentsPageMultiError, or
// nil if none found.
func (m *StudentsPage) ValidateAll() error {
	return m.validate(true)
}

func (m *StudentsPage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	// no validation rules for PageCount

	// no validation rules for PageNumber

	// no validation rules for PageSize

	for idx, item := range m.GetStudents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StudentsPageValidationError{
						field:  fmt.Sprintf("Students[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StudentsPageValidationError{
						field:  fmt.Sprintf("Students[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StudentsPageValidationError{
					field:  fmt.Sprintf("Students[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StudentsPageMultiError(errors)
	}

	return nil
}

// StudentsPageMultiError is an error wrapping multiple validation errors
// returned by StudentsPage.ValidateAll() if the designated constraints aren't met.
type StudentsPageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudentsPageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudentsPageMultiError) AllErrors() []error { return m }

// StudentsPageValidationError is the validation error returned by
// StudentsPage.Validate if the designated constraints aren't met.
type StudentsPageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudentsPageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudentsPageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudentsPageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudentsPageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudentsPageValidationError) ErrorName() string { return "StudentsPageValidationError" }

// Error satisfies the builtin error interface
func (e StudentsPageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudentsPage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudentsPageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudentsPageValidationError{}
